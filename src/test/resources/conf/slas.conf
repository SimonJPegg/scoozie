workflow {
  name: "someworkflow"
  path: "somepath"
  credentials {
    name: "someCredentials"
    type: "credentialsType"
    configuration: {
      credentials1:"value1",
      credentials2:"value2",
      credentials3:"value3",
      credentials4:"value4"
    }
  }
  transitions: [
    {
      type:"start"
      ok-to:"decisionNode"
    },
    {
      name:"decisionNode"
      type:"decision"
      default: "sparkAction"
      switches: {
        sparkAction: "someVar eq 1"
        hiveAction: "someOtherVar eq someVar"
      }
    }
    {
      name:"sparkAction"
      type:"spark"
      job-xml: "someSettings"
      spark-master-url: "masterurl"
      spark-mode: "mode"
      spark-job-name: "Jobname"
      main-class: "somemainclass"
      spark-jar: "spark.jar"
      spark-options: "spark-options"
      command-line-arguments: []
      prepare: {
        delete: "deletePath"
        mkdir: "makePath"
      }
      files: []
      configuration: {}
      ok-to: "shellAction"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name:"hiveAction"
      type: "hive"
      job-xml: "settings"
      script-name: "script.hql"
      script-location: "/some/location"
      parameters: []
      files: []
      configuration: {}
      ok-to: "shellAction"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name:"shellAction"
      type:"shell"
      script-name: "script.sh"
      script-location: "/some/location"
      command-line-arguments: []
      environment-variables: []
      files: []
      configuration: {}
      ok-to: "fsAction"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name: "fsAction"
      type: "filesystem"
      job-xml: "/path/to/job.xml"
      configuration: {}
      steps: [
        {delete: "/some/delte/dir"},
        {mkdir: "/some/make/dir"},
        {touchz: "/some/touch/dir"},
        {chmod: {path:"/some/chmod/dir", permissions:"0755", dir-files:"true"}},
        {move: {source:"/some/move/source",  target:"/some/move/target" }}
        ]
      ok-to: "distCPAction"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name: "distCPAction"
      type: "distcp"
      arguments: ["one","two","three"]
      java-options: "-Dno.bugs=true"
      configuration: {}
      prepare: {}
      ok-to: "javaAction"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name: "javaAction"
      type: "java"
      main-class: "some.main.class"
      java-jar: "some.jar"
      java-options: "-Dno.bugs=true"
      command-line-arguments: ["somthing"]
      files: ["file1", "file2"]
      capture-output: false //optional
      ok-to: "pigAction"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name: "pigAction"
      type: "pig"
      script: ""
      params: ["one","two"]
      arguments: []
      files: []
      ok-to: "sqoopFork"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name:"sqoopFork"
      type:"fork"
      paths: ["sqoopAction1", "sqoopAction2"]
    },
    {
      name: "sqoopAction1"
      type: "sqoop"
      command: "some command"
      files: []
      ok-to: "sqoopJoin"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name: "sqoopAction2"
      type: "sqoop"
      command-line-arguments: ["one","two"]
      files: []
      ok-to: "sqoopJoin"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name:"sqoopJoin"
      type:"join"
      ok-to: "sshAction"
    },
    {
      name: "sshAction"
      type: "ssh"
      host: "someHost"
      command: "someCommand"
      capture-output: true //optional
      command-line-arguments: ["ssh1", "ssh2"]
      ok-to: "subworkflowAction"
      error-to: "errorEmail"
      sla: ${actionSLA}
    },
    {
      name: "subworkflowAction"
      type: "subworflow"
      application-path: "/some/app/path"
      propagate-configuration: true //optional
      configuration: {}
      ok-to: "end"
      error-to: "errorEmail"
      sla: ${actionSLA}
    }
    {
      name:"errorEmail"
      type:"email"
      to: ["a@a.com"]
      cc: []
      subject: "hello"
      body: "yep"
      ok-to: "kill"
      error-to: "kill"
    },
    {
      type: "kill"
      message: "workflow is kill"
    },
    {
      type:"end"
    }
  ]
  configuration: {
    workflow1:"value1",
    workflow2:"value2",
    workflow3:"value3",
    workflow4:"value4"
  }
  yarn-config {
    name-node: "someNameNode"
    job-tracker: "someJobTracker"
  }
}
coordinator: {
  name: "someCoordinator"
  frequency: "someFreq"
  start: "someStart"
  end: "someEnd"
  timezone: "someTimezone"
  configuration: {
    prop1: value1
    prop2: value2
    prop3: value3
    prop4: value4
  }
}

actionSLA : {
  nominal-time: "nominalTime"
  should-start: "10 * MINUTES"
  should-end: "30 * MINUTES"
  max-duration: "30 * MINUTES"
  alert-events: ["start_miss", "end_miss","duration_miss"]
  alert-contacts: ["a@a.com", "b@b.com"]
  notification-message:  ${workflow.name} "is breaching SLA"
  upstream-applications: ["app1", "app2"]
}