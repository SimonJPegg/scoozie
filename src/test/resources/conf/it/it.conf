version: "0.1"

app.path: "/user/cloudera/test"

actions: {
  start: {
    type:"start"
    ok-to:${actions.mainFork.name}
  }
  mainFork: {
    name:"someFork"
    type:"fork"
    paths: [${actions.hiveAction.name}, ${actions.fsAction.name}] //names of the actions
  }
  hiveAction: {
    name:"hiveAction"
    type: "hive"
    script-name: "hiveScript.hql"
    script-location: ${app.path}/${actions.hiveAction.script-name}
    parameters: ["P=1","Q=2"]
    files: [${actions.hiveAction.script-name}]
    configuration: {
      test:"one"
    }
    ok-to: ${actions.mainJoin.name}
    error-to: ${actions.errorEmail.name}
  }
  fsAction: {
    name: "fsAction"
    type: "filesystem"
    configuration: {}
    steps: [
      //any of
      {mkdir: ${app.path}/testing},
      {mkdir: ${app.path}/testing2},
      {touchz: ${app.path}/testing/file},
      {chmod: {path:${app.path}/testing/file, permissions:"-rwxrwxrwx", dir-files:"false"}}, //note: Strings
      {move: {source:${app.path}/testing/file,  target:${app.path}/testing2/file }}
      {delete: ${app.path}/testing}
    ]
    ok-to: ${actions.mainJoin.name}
    error-to: ${actions.errorEmail.name}
  }
  mainJoin: {
    name:"mainJoin"
    type:"join"
    ok-to: ${actions.shellAction.name}
  }
  shellAction: {
    name:"shellAction"
    type:"shell"
    script-name: "bashScript.sh"
    script-location: ${app.path}/${actions.shellAction.script-name}
    command-line-arguments: ["one","two"]
    capture-output: true
    environment-variables: []
    files: []
    configuration: {}
    ok-to: ${actions.decisionAction.name}
    error-to: ${actions.errorEmail.name}
    sla:  {
      nominal-time: "${nominalTime}"
      should-start: "1"
      should-end: "1"
      max-duration: "1"
      alert-events: ["start_miss", "end_miss","duration_miss"]
      alert-contacts: ["alert@oozie.com"]
      notification-message: "Notification Message"
      upstream-applications: ["application-a","application-b"]
    }
  }
  decisionAction: {
    name:"decisionAction"
    type:"decision"
    default: ${actions.javaAction.name}
    switches: {
      javaAction: "${errorEmail_to eq 'a@a.com'}"
      sshAction: "${errorEmail_to eq 'b@a.com'}"
    }
  }
  javaAction: {
    name: "javaAction"
    type: "java"
    main-class: "org.antipathy.scoozie.Scoozie"
    java-jar: "scoozie_2.12-0.4.3.jar"
    java-options: "-Dsome=value"
    command-line-arguments: []
    files: []
    capture-output: true //optional
    configuration: {}
    prepare: {}
    ok-to:  ${actions.fsAction2.name}
    error-to: ${actions.fsAction2.name}
  }
  sshAction: {
    name: "sshAction"
    type: "ssh"
    host: "cloudera@localhost"
    command: "ls -la"
    capture-output: true //optional
    command-line-arguments: []
    ok-to: ${actions.fsAction2.name}
    error-to: ${actions.errorEmail.name}
  }
  errorEmail: {
    name:"errorEmail"
    type:"email"
    to: ["a@a.com"]
    cc: []
    subject: "${wf:name()} failed on ${wf:lastErrorNode}"
    body: "yep"
    ok-to: ${actions.kill.name}
    error-to: ${actions.kill.name}
  }
  fsAction2: {
    name: "cleanUp"
    type: "filesystem"
    configuration: {}
    steps: [
      {delete: ${app.path}/testing},
      {delete: ${app.path}/testing2}
    ]
    ok-to: ${actions.end.name}
    error-to: ${actions.errorEmail.name}
  }
  kill: {
    name: "kill"
    type: "kill"
    message: "${wf:name()} failed on ${wf:lastErrorNode}"
  }
  end: {
    name: "end"
    type:"end"
  }
}

workflow {
  name: "testWorkflow"
  path: ${app.path}
  transitions: [
    ${actions.start},
    ${actions.mainFork},
    ${actions.hiveAction},
    ${actions.fsAction},
    ${actions.mainJoin},
    ${actions.shellAction},
    ${actions.decisionAction},
    ${actions.javaAction},
    ${actions.sshAction},
    ${actions.errorEmail},
    ${actions.fsAction2},
    ${actions.kill},
    ${actions.end}
  ]
  configuration: {
    workflow1:"value1",
    workflow2:"value2",
    workflow3:"value3",
    workflow4:"value4"
  }
  yarn-config {
    name-node: "hdfs://quickstart.cloudera:8020"
    job-tracker: "quickstart.cloudera:8032"
  }
}
coordinator: {
  name: "testCoordinator"
  path: ${app.path}
  frequency: "coord:hours(1)"
  start: "2019-01-01T00:00Z"
  end: "2019-01-01T04:00Z"
  timezone: "Europe/London"
  configuration: {
    nominalTime: "coord:nominalTime()"
  }
}